CompUnit      ::= Decl
                | FuncDef
                | CompUnit Decl
                | CompUnit FuncDef
;

Decl          ::= KW_CONST VarType Defs SEMICOLON
                | VarType Defs SEMICOLON
;
Defs          ::= Def 
                | Defs COMMA Def
;
VarType       ::= KW_INT
;
Def           ::= IDENT MaybeIdx ASSIGN InitVal
                | IDENT MaybeIdx
;
MaybeIdx      ::= //empty
                | MaybeIdx L_BRACKET Exp R_BRACKET
;
InitVal       ::= Exp
                | L_BRACE R_BRACE
                | L_BRACE ManyInitVal R_BRACE
;
ManyInitVal   ::= InitVal
                | ManyInitVal COMMA InitVal
;

FuncDef       ::= FuncType IDENT L_PAREN ZeroOrManyFuncDefParam R_PAREN Block
;
FuncType      ::= KW_VOID | KW_INT
;
ZeroOrManyFuncDefParam ::= //empty
                         | ManyFuncDefParam
;
ManyFuncDefParam ::= FuncDefParam
                   | ManyFuncDefParam COMMA FuncDefParam
;
FuncDefParam  ::= VarType IDENT
                | VarType IDENT L_BRACKET R_BRACKET MaybeIdx
;
Block         ::= L_BRACE BlockItems R_BRACE
;
BlockItems    ::= //empty
                | BlockItems Decl
                | BlockItems Stmt
;
Stmt          ::= LVal ASSIGN Exp SEMICOLON
                | Exp SEMICOLON
                | SEMICOLON
                | Block
                | KW_IF L_PAREN Cond R_PAREN Stmt %prec PREC_IF_ONLY
                | KW_IF L_PAREN Cond R_PAREN Stmt "else" Stmt % prec PREC_IF_ELSE
                | KW_WHILE L_PAREN Cond R_PAREN Stmt
                | KW_BREAK SEMICOLON
                | KW_CONTINUE SEMICOLON
                | KW_RETURN SEMICOLON
                | KW_RETURN Exp SEMICOLON
;
Exp           ::= AddExp
;
Cond          ::= LOrExp
;
LVal          ::= IDENT MaybeIdx
;

PrimaryExp    ::= L_PAREN Exp R_PAREN
                | LVal
                | LITERAL
;
UnaryExp      ::= PrimaryExp
                | IDENT L_PAREN ZeroOrManyFuncUseParam R_PAREN
                | UnaryOp UnaryExp
;
UnaryOp       ::= "+" | "-" | OP_NOT
;
ZeroOrManyFuncUseParam ::= //empty
                         | ManyFuncUseParam
;
ManyFuncUseParam ::= Exp
                   | ManyFuncUseParam COMMA Exp
;
MulExp        ::= UnaryExp
                | MulExp ("*" | "/" | "%") UnaryExp
;
AddExp        ::= MulExp
                | AddExp ("+" | "-") MulExp
;
RelExp        ::= AddExp
                | RelExp ("<" | ">" | "<=" | ">=") AddExp
;
EqExp         ::= RelExp
                | EqExp ("==" | "!=") RelExp
;
LAndExp       ::= EqExp
                | LAndExp OP_AND EqExp
;
LOrExp        ::= LAndExp
                | LOrExp OP_OR LAndExp
;
